// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"lottery/gen/model"
)

func newUserParticipation(db *gorm.DB, opts ...gen.DOOption) userParticipation {
	_userParticipation := userParticipation{}

	_userParticipation.userParticipationDo.UseDB(db, opts...)
	_userParticipation.userParticipationDo.UseModel(&model.UserParticipation{})

	tableName := _userParticipation.userParticipationDo.TableName()
	_userParticipation.ALL = field.NewAsterisk(tableName)
	_userParticipation.ID = field.NewInt32(tableName, "id")
	_userParticipation.UID = field.NewInt32(tableName, "uid")
	_userParticipation.Date = field.NewTime(tableName, "date")
	_userParticipation.Count_ = field.NewInt32(tableName, "count")
	_userParticipation.SysStatus = field.NewInt16(tableName, "sys_status")
	_userParticipation.SysCreated = field.NewInt32(tableName, "sys_created")
	_userParticipation.SysUpdated = field.NewInt32(tableName, "sys_updated")

	_userParticipation.fillFieldMap()

	return _userParticipation
}

type userParticipation struct {
	userParticipationDo

	ALL        field.Asterisk
	ID         field.Int32
	UID        field.Int32
	Date       field.Time
	Count_     field.Int32
	SysStatus  field.Int16
	SysCreated field.Int32
	SysUpdated field.Int32

	fieldMap map[string]field.Expr
}

func (u userParticipation) Table(newTableName string) *userParticipation {
	u.userParticipationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userParticipation) As(alias string) *userParticipation {
	u.userParticipationDo.DO = *(u.userParticipationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userParticipation) updateTableName(table string) *userParticipation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UID = field.NewInt32(table, "uid")
	u.Date = field.NewTime(table, "date")
	u.Count_ = field.NewInt32(table, "count")
	u.SysStatus = field.NewInt16(table, "sys_status")
	u.SysCreated = field.NewInt32(table, "sys_created")
	u.SysUpdated = field.NewInt32(table, "sys_updated")

	u.fillFieldMap()

	return u
}

func (u *userParticipation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userParticipation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["date"] = u.Date
	u.fieldMap["count"] = u.Count_
	u.fieldMap["sys_status"] = u.SysStatus
	u.fieldMap["sys_created"] = u.SysCreated
	u.fieldMap["sys_updated"] = u.SysUpdated
}

func (u userParticipation) clone(db *gorm.DB) userParticipation {
	u.userParticipationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userParticipation) replaceDB(db *gorm.DB) userParticipation {
	u.userParticipationDo.ReplaceDB(db)
	return u
}

type userParticipationDo struct{ gen.DO }

type IUserParticipationDo interface {
	gen.SubQuery
	Debug() IUserParticipationDo
	WithContext(ctx context.Context) IUserParticipationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserParticipationDo
	WriteDB() IUserParticipationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserParticipationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserParticipationDo
	Not(conds ...gen.Condition) IUserParticipationDo
	Or(conds ...gen.Condition) IUserParticipationDo
	Select(conds ...field.Expr) IUserParticipationDo
	Where(conds ...gen.Condition) IUserParticipationDo
	Order(conds ...field.Expr) IUserParticipationDo
	Distinct(cols ...field.Expr) IUserParticipationDo
	Omit(cols ...field.Expr) IUserParticipationDo
	Join(table schema.Tabler, on ...field.Expr) IUserParticipationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserParticipationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserParticipationDo
	Group(cols ...field.Expr) IUserParticipationDo
	Having(conds ...gen.Condition) IUserParticipationDo
	Limit(limit int) IUserParticipationDo
	Offset(offset int) IUserParticipationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserParticipationDo
	Unscoped() IUserParticipationDo
	Create(values ...*model.UserParticipation) error
	CreateInBatches(values []*model.UserParticipation, batchSize int) error
	Save(values ...*model.UserParticipation) error
	First() (*model.UserParticipation, error)
	Take() (*model.UserParticipation, error)
	Last() (*model.UserParticipation, error)
	Find() ([]*model.UserParticipation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserParticipation, err error)
	FindInBatches(result *[]*model.UserParticipation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserParticipation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserParticipationDo
	Assign(attrs ...field.AssignExpr) IUserParticipationDo
	Joins(fields ...field.RelationField) IUserParticipationDo
	Preload(fields ...field.RelationField) IUserParticipationDo
	FirstOrInit() (*model.UserParticipation, error)
	FirstOrCreate() (*model.UserParticipation, error)
	FindByPage(offset int, limit int) (result []*model.UserParticipation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserParticipationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userParticipationDo) Debug() IUserParticipationDo {
	return u.withDO(u.DO.Debug())
}

func (u userParticipationDo) WithContext(ctx context.Context) IUserParticipationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userParticipationDo) ReadDB() IUserParticipationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userParticipationDo) WriteDB() IUserParticipationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userParticipationDo) Session(config *gorm.Session) IUserParticipationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userParticipationDo) Clauses(conds ...clause.Expression) IUserParticipationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userParticipationDo) Returning(value interface{}, columns ...string) IUserParticipationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userParticipationDo) Not(conds ...gen.Condition) IUserParticipationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userParticipationDo) Or(conds ...gen.Condition) IUserParticipationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userParticipationDo) Select(conds ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userParticipationDo) Where(conds ...gen.Condition) IUserParticipationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userParticipationDo) Order(conds ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userParticipationDo) Distinct(cols ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userParticipationDo) Omit(cols ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userParticipationDo) Join(table schema.Tabler, on ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userParticipationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userParticipationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userParticipationDo) Group(cols ...field.Expr) IUserParticipationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userParticipationDo) Having(conds ...gen.Condition) IUserParticipationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userParticipationDo) Limit(limit int) IUserParticipationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userParticipationDo) Offset(offset int) IUserParticipationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userParticipationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserParticipationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userParticipationDo) Unscoped() IUserParticipationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userParticipationDo) Create(values ...*model.UserParticipation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userParticipationDo) CreateInBatches(values []*model.UserParticipation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userParticipationDo) Save(values ...*model.UserParticipation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userParticipationDo) First() (*model.UserParticipation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserParticipation), nil
	}
}

func (u userParticipationDo) Take() (*model.UserParticipation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserParticipation), nil
	}
}

func (u userParticipationDo) Last() (*model.UserParticipation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserParticipation), nil
	}
}

func (u userParticipationDo) Find() ([]*model.UserParticipation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserParticipation), err
}

func (u userParticipationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserParticipation, err error) {
	buf := make([]*model.UserParticipation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userParticipationDo) FindInBatches(result *[]*model.UserParticipation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userParticipationDo) Attrs(attrs ...field.AssignExpr) IUserParticipationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userParticipationDo) Assign(attrs ...field.AssignExpr) IUserParticipationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userParticipationDo) Joins(fields ...field.RelationField) IUserParticipationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userParticipationDo) Preload(fields ...field.RelationField) IUserParticipationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userParticipationDo) FirstOrInit() (*model.UserParticipation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserParticipation), nil
	}
}

func (u userParticipationDo) FirstOrCreate() (*model.UserParticipation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserParticipation), nil
	}
}

func (u userParticipationDo) FindByPage(offset int, limit int) (result []*model.UserParticipation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userParticipationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userParticipationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userParticipationDo) Delete(models ...*model.UserParticipation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userParticipationDo) withDO(do gen.Dao) *userParticipationDo {
	u.DO = *do.(*gen.DO)
	return u
}
