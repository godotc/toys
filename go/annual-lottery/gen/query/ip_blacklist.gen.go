// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"lottery/gen/model"
)

func newIPBlacklist(db *gorm.DB, opts ...gen.DOOption) iPBlacklist {
	_iPBlacklist := iPBlacklist{}

	_iPBlacklist.iPBlacklistDo.UseDB(db, opts...)
	_iPBlacklist.iPBlacklistDo.UseModel(&model.IPBlacklist{})

	tableName := _iPBlacklist.iPBlacklistDo.TableName()
	_iPBlacklist.ALL = field.NewAsterisk(tableName)
	_iPBlacklist.ID = field.NewInt32(tableName, "id")
	_iPBlacklist.IP = field.NewString(tableName, "ip")
	_iPBlacklist.EndTime = field.NewInt32(tableName, "end_time")
	_iPBlacklist.SysStatus = field.NewInt16(tableName, "sys_status")
	_iPBlacklist.SysCreated = field.NewInt32(tableName, "sys_created")
	_iPBlacklist.SysUpdated = field.NewInt32(tableName, "sys_updated")

	_iPBlacklist.fillFieldMap()

	return _iPBlacklist
}

type iPBlacklist struct {
	iPBlacklistDo

	ALL        field.Asterisk
	ID         field.Int32
	IP         field.String
	EndTime    field.Int32
	SysStatus  field.Int16
	SysCreated field.Int32
	SysUpdated field.Int32

	fieldMap map[string]field.Expr
}

func (i iPBlacklist) Table(newTableName string) *iPBlacklist {
	i.iPBlacklistDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iPBlacklist) As(alias string) *iPBlacklist {
	i.iPBlacklistDo.DO = *(i.iPBlacklistDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iPBlacklist) updateTableName(table string) *iPBlacklist {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.IP = field.NewString(table, "ip")
	i.EndTime = field.NewInt32(table, "end_time")
	i.SysStatus = field.NewInt16(table, "sys_status")
	i.SysCreated = field.NewInt32(table, "sys_created")
	i.SysUpdated = field.NewInt32(table, "sys_updated")

	i.fillFieldMap()

	return i
}

func (i *iPBlacklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iPBlacklist) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["ip"] = i.IP
	i.fieldMap["end_time"] = i.EndTime
	i.fieldMap["sys_status"] = i.SysStatus
	i.fieldMap["sys_created"] = i.SysCreated
	i.fieldMap["sys_updated"] = i.SysUpdated
}

func (i iPBlacklist) clone(db *gorm.DB) iPBlacklist {
	i.iPBlacklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iPBlacklist) replaceDB(db *gorm.DB) iPBlacklist {
	i.iPBlacklistDo.ReplaceDB(db)
	return i
}

type iPBlacklistDo struct{ gen.DO }

type IIPBlacklistDo interface {
	gen.SubQuery
	Debug() IIPBlacklistDo
	WithContext(ctx context.Context) IIPBlacklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIPBlacklistDo
	WriteDB() IIPBlacklistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIPBlacklistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIPBlacklistDo
	Not(conds ...gen.Condition) IIPBlacklistDo
	Or(conds ...gen.Condition) IIPBlacklistDo
	Select(conds ...field.Expr) IIPBlacklistDo
	Where(conds ...gen.Condition) IIPBlacklistDo
	Order(conds ...field.Expr) IIPBlacklistDo
	Distinct(cols ...field.Expr) IIPBlacklistDo
	Omit(cols ...field.Expr) IIPBlacklistDo
	Join(table schema.Tabler, on ...field.Expr) IIPBlacklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIPBlacklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIPBlacklistDo
	Group(cols ...field.Expr) IIPBlacklistDo
	Having(conds ...gen.Condition) IIPBlacklistDo
	Limit(limit int) IIPBlacklistDo
	Offset(offset int) IIPBlacklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIPBlacklistDo
	Unscoped() IIPBlacklistDo
	Create(values ...*model.IPBlacklist) error
	CreateInBatches(values []*model.IPBlacklist, batchSize int) error
	Save(values ...*model.IPBlacklist) error
	First() (*model.IPBlacklist, error)
	Take() (*model.IPBlacklist, error)
	Last() (*model.IPBlacklist, error)
	Find() ([]*model.IPBlacklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPBlacklist, err error)
	FindInBatches(result *[]*model.IPBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IPBlacklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIPBlacklistDo
	Assign(attrs ...field.AssignExpr) IIPBlacklistDo
	Joins(fields ...field.RelationField) IIPBlacklistDo
	Preload(fields ...field.RelationField) IIPBlacklistDo
	FirstOrInit() (*model.IPBlacklist, error)
	FirstOrCreate() (*model.IPBlacklist, error)
	FindByPage(offset int, limit int) (result []*model.IPBlacklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIPBlacklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iPBlacklistDo) Debug() IIPBlacklistDo {
	return i.withDO(i.DO.Debug())
}

func (i iPBlacklistDo) WithContext(ctx context.Context) IIPBlacklistDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iPBlacklistDo) ReadDB() IIPBlacklistDo {
	return i.Clauses(dbresolver.Read)
}

func (i iPBlacklistDo) WriteDB() IIPBlacklistDo {
	return i.Clauses(dbresolver.Write)
}

func (i iPBlacklistDo) Session(config *gorm.Session) IIPBlacklistDo {
	return i.withDO(i.DO.Session(config))
}

func (i iPBlacklistDo) Clauses(conds ...clause.Expression) IIPBlacklistDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iPBlacklistDo) Returning(value interface{}, columns ...string) IIPBlacklistDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iPBlacklistDo) Not(conds ...gen.Condition) IIPBlacklistDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iPBlacklistDo) Or(conds ...gen.Condition) IIPBlacklistDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iPBlacklistDo) Select(conds ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iPBlacklistDo) Where(conds ...gen.Condition) IIPBlacklistDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iPBlacklistDo) Order(conds ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iPBlacklistDo) Distinct(cols ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iPBlacklistDo) Omit(cols ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iPBlacklistDo) Join(table schema.Tabler, on ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iPBlacklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iPBlacklistDo) RightJoin(table schema.Tabler, on ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iPBlacklistDo) Group(cols ...field.Expr) IIPBlacklistDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iPBlacklistDo) Having(conds ...gen.Condition) IIPBlacklistDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iPBlacklistDo) Limit(limit int) IIPBlacklistDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iPBlacklistDo) Offset(offset int) IIPBlacklistDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iPBlacklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIPBlacklistDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iPBlacklistDo) Unscoped() IIPBlacklistDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iPBlacklistDo) Create(values ...*model.IPBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iPBlacklistDo) CreateInBatches(values []*model.IPBlacklist, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iPBlacklistDo) Save(values ...*model.IPBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iPBlacklistDo) First() (*model.IPBlacklist, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPBlacklist), nil
	}
}

func (i iPBlacklistDo) Take() (*model.IPBlacklist, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPBlacklist), nil
	}
}

func (i iPBlacklistDo) Last() (*model.IPBlacklist, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPBlacklist), nil
	}
}

func (i iPBlacklistDo) Find() ([]*model.IPBlacklist, error) {
	result, err := i.DO.Find()
	return result.([]*model.IPBlacklist), err
}

func (i iPBlacklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPBlacklist, err error) {
	buf := make([]*model.IPBlacklist, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iPBlacklistDo) FindInBatches(result *[]*model.IPBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iPBlacklistDo) Attrs(attrs ...field.AssignExpr) IIPBlacklistDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iPBlacklistDo) Assign(attrs ...field.AssignExpr) IIPBlacklistDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iPBlacklistDo) Joins(fields ...field.RelationField) IIPBlacklistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iPBlacklistDo) Preload(fields ...field.RelationField) IIPBlacklistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iPBlacklistDo) FirstOrInit() (*model.IPBlacklist, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPBlacklist), nil
	}
}

func (i iPBlacklistDo) FirstOrCreate() (*model.IPBlacklist, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPBlacklist), nil
	}
}

func (i iPBlacklistDo) FindByPage(offset int, limit int) (result []*model.IPBlacklist, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iPBlacklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iPBlacklistDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iPBlacklistDo) Delete(models ...*model.IPBlacklist) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iPBlacklistDo) withDO(do gen.Dao) *iPBlacklistDo {
	i.DO = *do.(*gen.DO)
	return i
}
