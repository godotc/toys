// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"lottery/gen/model"
)

func newLotteryRecord(db *gorm.DB, opts ...gen.DOOption) lotteryRecord {
	_lotteryRecord := lotteryRecord{}

	_lotteryRecord.lotteryRecordDo.UseDB(db, opts...)
	_lotteryRecord.lotteryRecordDo.UseModel(&model.LotteryRecord{})

	tableName := _lotteryRecord.lotteryRecordDo.TableName()
	_lotteryRecord.ALL = field.NewAsterisk(tableName)
	_lotteryRecord.ID = field.NewInt32(tableName, "id")
	_lotteryRecord.GiftID = field.NewInt32(tableName, "gift_id")
	_lotteryRecord.GiftName = field.NewString(tableName, "gift_name")
	_lotteryRecord.GiftType = field.NewInt32(tableName, "gift_type")
	_lotteryRecord.UID = field.NewInt32(tableName, "uid")
	_lotteryRecord.Username = field.NewString(tableName, "username")
	_lotteryRecord.PrizeCode = field.NewInt32(tableName, "prize_code")
	_lotteryRecord.GiftData = field.NewString(tableName, "gift_data")
	_lotteryRecord.SysStatus = field.NewInt16(tableName, "sys_status")
	_lotteryRecord.SysCreated = field.NewInt32(tableName, "sys_created")
	_lotteryRecord.SysUpdated = field.NewInt32(tableName, "sys_updated")

	_lotteryRecord.fillFieldMap()

	return _lotteryRecord
}

type lotteryRecord struct {
	lotteryRecordDo

	ALL        field.Asterisk
	ID         field.Int32
	GiftID     field.Int32
	GiftName   field.String
	GiftType   field.Int32
	UID        field.Int32
	Username   field.String
	PrizeCode  field.Int32
	GiftData   field.String
	SysStatus  field.Int16
	SysCreated field.Int32
	SysUpdated field.Int32

	fieldMap map[string]field.Expr
}

func (l lotteryRecord) Table(newTableName string) *lotteryRecord {
	l.lotteryRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lotteryRecord) As(alias string) *lotteryRecord {
	l.lotteryRecordDo.DO = *(l.lotteryRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lotteryRecord) updateTableName(table string) *lotteryRecord {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.GiftID = field.NewInt32(table, "gift_id")
	l.GiftName = field.NewString(table, "gift_name")
	l.GiftType = field.NewInt32(table, "gift_type")
	l.UID = field.NewInt32(table, "uid")
	l.Username = field.NewString(table, "username")
	l.PrizeCode = field.NewInt32(table, "prize_code")
	l.GiftData = field.NewString(table, "gift_data")
	l.SysStatus = field.NewInt16(table, "sys_status")
	l.SysCreated = field.NewInt32(table, "sys_created")
	l.SysUpdated = field.NewInt32(table, "sys_updated")

	l.fillFieldMap()

	return l
}

func (l *lotteryRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lotteryRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 11)
	l.fieldMap["id"] = l.ID
	l.fieldMap["gift_id"] = l.GiftID
	l.fieldMap["gift_name"] = l.GiftName
	l.fieldMap["gift_type"] = l.GiftType
	l.fieldMap["uid"] = l.UID
	l.fieldMap["username"] = l.Username
	l.fieldMap["prize_code"] = l.PrizeCode
	l.fieldMap["gift_data"] = l.GiftData
	l.fieldMap["sys_status"] = l.SysStatus
	l.fieldMap["sys_created"] = l.SysCreated
	l.fieldMap["sys_updated"] = l.SysUpdated
}

func (l lotteryRecord) clone(db *gorm.DB) lotteryRecord {
	l.lotteryRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lotteryRecord) replaceDB(db *gorm.DB) lotteryRecord {
	l.lotteryRecordDo.ReplaceDB(db)
	return l
}

type lotteryRecordDo struct{ gen.DO }

type ILotteryRecordDo interface {
	gen.SubQuery
	Debug() ILotteryRecordDo
	WithContext(ctx context.Context) ILotteryRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILotteryRecordDo
	WriteDB() ILotteryRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILotteryRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILotteryRecordDo
	Not(conds ...gen.Condition) ILotteryRecordDo
	Or(conds ...gen.Condition) ILotteryRecordDo
	Select(conds ...field.Expr) ILotteryRecordDo
	Where(conds ...gen.Condition) ILotteryRecordDo
	Order(conds ...field.Expr) ILotteryRecordDo
	Distinct(cols ...field.Expr) ILotteryRecordDo
	Omit(cols ...field.Expr) ILotteryRecordDo
	Join(table schema.Tabler, on ...field.Expr) ILotteryRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILotteryRecordDo
	Group(cols ...field.Expr) ILotteryRecordDo
	Having(conds ...gen.Condition) ILotteryRecordDo
	Limit(limit int) ILotteryRecordDo
	Offset(offset int) ILotteryRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryRecordDo
	Unscoped() ILotteryRecordDo
	Create(values ...*model.LotteryRecord) error
	CreateInBatches(values []*model.LotteryRecord, batchSize int) error
	Save(values ...*model.LotteryRecord) error
	First() (*model.LotteryRecord, error)
	Take() (*model.LotteryRecord, error)
	Last() (*model.LotteryRecord, error)
	Find() ([]*model.LotteryRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryRecord, err error)
	FindInBatches(result *[]*model.LotteryRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LotteryRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILotteryRecordDo
	Assign(attrs ...field.AssignExpr) ILotteryRecordDo
	Joins(fields ...field.RelationField) ILotteryRecordDo
	Preload(fields ...field.RelationField) ILotteryRecordDo
	FirstOrInit() (*model.LotteryRecord, error)
	FirstOrCreate() (*model.LotteryRecord, error)
	FindByPage(offset int, limit int) (result []*model.LotteryRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILotteryRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lotteryRecordDo) Debug() ILotteryRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l lotteryRecordDo) WithContext(ctx context.Context) ILotteryRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lotteryRecordDo) ReadDB() ILotteryRecordDo {
	return l.Clauses(dbresolver.Read)
}

func (l lotteryRecordDo) WriteDB() ILotteryRecordDo {
	return l.Clauses(dbresolver.Write)
}

func (l lotteryRecordDo) Session(config *gorm.Session) ILotteryRecordDo {
	return l.withDO(l.DO.Session(config))
}

func (l lotteryRecordDo) Clauses(conds ...clause.Expression) ILotteryRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lotteryRecordDo) Returning(value interface{}, columns ...string) ILotteryRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lotteryRecordDo) Not(conds ...gen.Condition) ILotteryRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lotteryRecordDo) Or(conds ...gen.Condition) ILotteryRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lotteryRecordDo) Select(conds ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lotteryRecordDo) Where(conds ...gen.Condition) ILotteryRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lotteryRecordDo) Order(conds ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lotteryRecordDo) Distinct(cols ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lotteryRecordDo) Omit(cols ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lotteryRecordDo) Join(table schema.Tabler, on ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lotteryRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lotteryRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lotteryRecordDo) Group(cols ...field.Expr) ILotteryRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lotteryRecordDo) Having(conds ...gen.Condition) ILotteryRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lotteryRecordDo) Limit(limit int) ILotteryRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lotteryRecordDo) Offset(offset int) ILotteryRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lotteryRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILotteryRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lotteryRecordDo) Unscoped() ILotteryRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lotteryRecordDo) Create(values ...*model.LotteryRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lotteryRecordDo) CreateInBatches(values []*model.LotteryRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lotteryRecordDo) Save(values ...*model.LotteryRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lotteryRecordDo) First() (*model.LotteryRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryRecord), nil
	}
}

func (l lotteryRecordDo) Take() (*model.LotteryRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryRecord), nil
	}
}

func (l lotteryRecordDo) Last() (*model.LotteryRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryRecord), nil
	}
}

func (l lotteryRecordDo) Find() ([]*model.LotteryRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LotteryRecord), err
}

func (l lotteryRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LotteryRecord, err error) {
	buf := make([]*model.LotteryRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lotteryRecordDo) FindInBatches(result *[]*model.LotteryRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lotteryRecordDo) Attrs(attrs ...field.AssignExpr) ILotteryRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lotteryRecordDo) Assign(attrs ...field.AssignExpr) ILotteryRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lotteryRecordDo) Joins(fields ...field.RelationField) ILotteryRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lotteryRecordDo) Preload(fields ...field.RelationField) ILotteryRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lotteryRecordDo) FirstOrInit() (*model.LotteryRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryRecord), nil
	}
}

func (l lotteryRecordDo) FirstOrCreate() (*model.LotteryRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LotteryRecord), nil
	}
}

func (l lotteryRecordDo) FindByPage(offset int, limit int) (result []*model.LotteryRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lotteryRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lotteryRecordDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lotteryRecordDo) Delete(models ...*model.LotteryRecord) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lotteryRecordDo) withDO(do gen.Dao) *lotteryRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
